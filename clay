#!/usr/bin/env python
import os, sys, argparse, subprocess
import yaml
from git import RemoteProgress, Repo, InvalidGitRepositoryError

config = yaml.load(open('./.clay.yml'))

class Command(object):
    @classmethod
    def build_arg_parser(cls, subparsers):
        """
        Returns the argparse object for this command.
        """
        raise NotImplementedError

class Install(Command):
    @classmethod
    def build_arg_parser(cls, subparsers):
        parser = subparsers.add_parser(
            'install',
            help='Install missing repos')
        return parser

    def __init__(self, args):
        pass

    def run(self):
        for name, url in config['repos'].iteritems():
            path = get_repo_path(name)
            if os.path.exists(path):
                try:
                    repo = Repo(path)
                    print '  "{}" already present at {}'.format(name, path)
                except InvalidGitRepositoryError:
                    print '  A working directory exists for "{}" at {} but it does not appear to contain a valid Git repository. Skipping.'.format(name, path)
                    continue
            else:
                repo = clone_repo(name, url)
            run_local_yaml_scripts(path, 'install')

class Update(Command):
    @classmethod
    def build_arg_parser(cls, subparsers):
        parser = subparsers.add_parser(
            'update',
            help='Update repo working copies')
        return parser

    def __init__(self, args):
        pass

    def run(self):
        for name, url in config['repos'].iteritems():
            path = get_repo_path(name)
            if os.path.exists(path):
                try:
                    repo = Repo(path)
                    if repo.active_branch.name != 'master':
                        print '"{}" is not currently on the master branch (Current branch: {}). Skipping update.'.format(name, repo.active_branch)
                        continue

                    if repo.is_dirty():
                        print '"{}" has uncommitted changes (Current branch: {}). Skipping.'.format(name, repo.active_branch)
                        continue

                    print 'Pulling {}'.format(name)
                    repo.remotes.origin.pull(progress=MyProgressPrinter())
                except InvalidGitRepositoryError:
                    print '  A working directory exists for "{}" at {} but it does not appear to contain a valid Git repository. Skipping.'.format(name, path)
                    continue
            else:
                print '"{}" does not appear to be checked out locally. Run install to clone it.'.format(name)
                continue
            run_local_yaml_scripts(path, 'install')

ALL_COMMANDS = [Install, Update]

class MyProgressPrinter(RemoteProgress):
    BAR = 'SHIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIYYUUT!'
    def update(self, op_code, cur_count, max_count=None, message=''):
        if max_count:
            progress = (100 / (max_count)) * cur_count
            sys.stdout.write('\r[')
            sys.stdout.write('{0}'.format(self.BAR[:int(progress * 50)/100]).ljust(50, ' '))
            sys.stdout.write('] {:3.4f}%'.format(progress))
            sys.stdout.flush()

def run_local_yaml_scripts(repo_path, command):
    local_yaml = get_local_yaml(repo_path)
    if local_yaml:
        for script in local_yaml[command]:
            try:
                print '    Running "{}"'.format(script)
                subprocess.check_call(script, shell=True, cwd=repo_path)
            except Exception as e:
                print "Error", e, "aborting..."
                return

def get_local_yaml(repo_path):
    yaml_path = os.path.join(repo_path, '.local.yml')
    if os.path.exists(yaml_path):
        return yaml.load(open(yaml_path))
    return None

def get_repo_path(name):
    return os.path.join(os.getcwd(), name)

def clone_repo(name, url):
    print 'Cloning {} from {}'.format(name, url)
    return Repo.clone_from(url, get_repo_path(name), progress=MyProgressPrinter())

def update_repo(name):
    print 'Updating {}'.format(name)
    repo = Repo(get_repo_path(name))
    repo.remotes.origin.pull()
    return repo

def build_parser():
    parser = argparse.ArgumentParser(
        description='Clay Davis',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    subparsers = parser.add_subparsers(title='Commands')
    for command_class in ALL_COMMANDS:
        subparser = command_class.build_arg_parser(subparsers)
        subparser.set_defaults(command_class=command_class)
    return parser


if __name__ == '__main__':
    parser = build_parser()
    args = parser.parse_args()
    command = args.command_class(args)
    command.run()
