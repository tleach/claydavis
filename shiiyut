#!/usr/bin/env python
import os, sys, argparse
import yaml
from git import RemoteProgress, Repo

config = yaml.load(open('./.shiiyut.yml'))

class Command(object):
    @classmethod
    def build_arg_parser(cls, subparsers):
        """
        Returns the argparse object for this command.
        """
        raise NotImplementedError

class Install(Command):
    @classmethod
    def build_arg_parser(cls, subparsers):
        parser = subparsers.add_parser(
            'install',
            help='Install missing GameChanger repos')
        return parser

    def __init__(self, args):
        pass

    def run(self):
        for name, url in config['repos'].iteritems():
            path = get_repo_path(name)
            if os.path.exists(path):
                repo = Repo(path)
                print "bare = {}".format(repo.bare)
            else:
                clone_repo(name, url)

ALL_COMMANDS = [Install]

class MyProgressPrinter(RemoteProgress):
    def update(self, op_code, cur_count, max_count=None, message=''):
        if max_count:
            progress = (100 / (max_count)) * cur_count
            sys.stdout.write('\r[')
            sys.stdout.write('{0}'.format('#' * (int(progress * 50)/100)).ljust(50, ' '))
            sys.stdout.write('] {:3.4f}%'.format(progress))
            sys.stdout.flush()

def get_repo_path(name):
    return os.path.join(os.getcwd(), name)

def clone_repo(name, url):
    print 'Cloning {} from {}'.format(name, url)
    return Repo.clone_from(url, get_repo_path(name), progress=MyProgressPrinter())

def update_repo(name):
    print 'Updating {}'.format(name)
    repo = Repo(get_repo_path(name))
    repo.remotes.origin.pull()
    return repo

def build_parser():
    parser = argparse.ArgumentParser(
        description='Clay Davis',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    subparsers = parser.add_subparsers(title='Commands')
    for command_class in ALL_COMMANDS:
        subparser = command_class.build_arg_parser(subparsers)
        subparser.set_defaults(command_class=command_class)
    return parser

def main():
    for name, url in REPOS.iteritems():
        try:
            update_repo(name)
        except Exception as e:
            clone_repo(name, url)

if __name__ == '__main__':
    parser = build_parser()
    args = parser.parse_args()
    command = args.command_class(args)
    command.run()
